<?php/** * cacti-cli * Copyright (C) 2014-2016, Minoru Furusawa, Toshiba corporation. * * This program is free software; you can redistribute it and/or modify * it under the terms of the GNU General Public License as published by * the Free Software Foundation; either version 2 of the License, or * (at your option) any later version. * * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the * GNU General Public License for more details. * * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA. */require 'common.php';use CACTI_CLI\Config;use CACTI_CLI\Site;use CACTI_CLI\SiteInfo;use CACTI_CLI\CactiGraphSet;use CACTI_CLI\CactiDomainTemplate;use CACTI_CLI\CactiModelTemplate;use CACTI_CLI\CactiDatabase;use Commando\Command;#use cli;$arguments = new \cli\Arguments();$arguments->addFlag(array('force', 'f'), 'Force update');$arguments->addFlag(array('quiet', 'q'), 'Disable all output');$arguments->addFlag(array('help', 'h'), 'Show this help screen');$arguments->addOption(array('generate-template', 'g'), 	'Graph generation rule file, ex) \'./lib/graph/{domain}/{metric}.json\'');// It requires the implementation of relocation of the graph menu.$arguments->addFlag('skip-tree', 'Skip graph registration of Tree Menu');$arguments->addFlag(array('disable-force', 'd'), 'Disable force update of rule');$arguments->addOption(array('site', 's'), array(	'description' => 'Site home directory, Default : Closest parent directory of current directory which exists \'.git\''));$arguments->addOption(array('tenant', 't'), array(	'default'     => '_default',	'description' => 'Tenant name'));$arguments->addOption(array('grep'), array(	'description' => 'Keyword filter of metric name'));$arguments->addOption(array('node-dir', 'n'), array(	'description' => 'Node directory'));$arguments->addOption(array('export'), array(	'description' => 'Domain template name of export target'));$arguments->addOption(array('import'), array(	'description' => 'Import file of domain template'));$arguments->addFlag(array('info', 'i'), array(	'description' => 'Output file of node information report'));$arguments->addFlag(array('backup'), array(	'description' => 'Backup cacti repository db'));$arguments->addFlag(array('restore'), array(	'description' => 'Restore cacti repository db'));$arguments->addOption(array('rule', 'r'), array(	'description' => 'JSON file of graph rule definition'));$arguments->addOption(array('graph-name'), array(	'description' => 'Grep keyword graph template name from graph rule'));$arguments->addOption(array('color-scheme'), array(	'description' => 'JSON file of Chart color scheme',	'default' => 'lib/graph/colors/default.json'));$arguments->addOption(array('color-style'), array(	'description' => 'Chart color style "gradation","random"', 'default' => 'random'));$arguments->addOption(array('device-sort'), array(	'default'     => 'none',	'description' => 'Select \'natural\',\'natural-reverse\',\'normal\',\'normal-reverse\',\'none\''));$arguments->addOption(array('view-sort'), array(	'default'     => 'timestamp',	'description' => 'Select \'natural\',\'natural-reverse\',\'normal\',\'normal-reverse\',\'timestamp\''));$result = $arguments->parse();if ($arguments['help']) {	echo "Generate graphs :\n";	echo "	<nodepath> [--site {site}] [--tenant {tenant}] [--force [--skip-tree]] [--grep s] [[--node-dir s]\n";	echo "	[--backup] [--recover]\n";	echo "	[--sort-by [name|time]]\n\n";	echo "	[--device-sort [natural|alphabetic|natural-reverse|alphabetic-reverse|none]]\n\n";	echo "Report nodes :\n";	echo "	<nodepath> [--info {file}]\n\n";	echo "Export template :\n";	echo "	--export {domain}\n\n";	echo "Import template :\n";	echo "	--import {templatefile}\n\n";	echo "Generate template :\n";	echo "	--generate-template {lib/graph/HW/vmstat.json} \ \n";	echo "		[--disable-force] \ \n";	echo "		[--graph-name {graph}] \ \n";	echo "		[--color-scheme {lib/graph/color/default.json}] \ \n";	echo "		[--color-style [gradation|random]]\n\n";	echo $arguments->getHelpScreen();	echo "\n\n";	exit;}$args          = $arguments->getArguments();$invalid_args  = $arguments->getInvalidArguments();$site_home     = (array_key_exists('site', $args)) ? $args['site'] : \CACTI_CLI\Utils\get_site_home();$target_node   = isset($invalid_args[0]) ? $invalid_args[0] : '/';$target_node   = preg_replace ( "/^(.*\/|)node(\/.+?)$/", "$2", $target_node );$tenant         = (array_key_exists('tenant',       $args)) ? $args['tenant'] : '_default';$force          = (array_key_exists('force',        $args)) ? true : false;$info           = (array_key_exists('info',         $args)) ? true : false;$skip_tree      = (array_key_exists('skip-tree',    $args)) ? true : false;$db_backup      = (array_key_exists('backup',       $args)) ? true : false;$db_restore     = (array_key_exists('restore',      $args)) ? true : false;$grep           = (array_key_exists('grep',         $args)) ? $args['grep']   : null;$node_path_dir  = (array_key_exists('node-dir',     $args)) ? $args['node-dir'] : null;$domain_export  = (array_key_exists('export',       $args)) ? $args['export'] : null;$domain_import  = (array_key_exists('import',       $args)) ? $args['import'] : null;$color_scheme   = (array_key_exists('color-scheme', $args)) ? $args['color-scheme'] : null;$color_style    = (array_key_exists('color-style',  $args)) ? $args['color-style']  : null;$device_sort    = (array_key_exists('device-sort',  $args)) ? $args['device-sort']  : 'none';$view_sort      = (array_key_exists('view-sort',    $args)) ? $args['view-sort']    : 'timestamp';$generate_template   = (array_key_exists('generate-template',  $args)) ? $args['generate-template'] : null;$disable_force       = (array_key_exists('disable-force', $args)) ? true : false;$graph_template_name = (array_key_exists('graph-name',     $args)) ? $args['graph-name'] : null;$cacti_cli_home = \CACTI_CLI\Utils\get_cacti_cli_home($site_home);if (!isset($cacti_cli_home)) {	echo "ERROR : Invalid site home, Cacti cli home not found : $site_home";	echo $arguments->getHelpScreen();	echo "\n\n";	exit;}include_once($cacti_cli_home . "/../include/global.php");include_once($config["base_path"]."/lib/api_automation_tools.php");include_once($config["base_path"]."/lib/data_query.php");include_once($config["base_path"]."/lib/utility.php");include_once($config["base_path"]."/lib/sort.php");include_once($config["base_path"]."/lib/template.php");include_once($config["base_path"]."/lib/api_data_source.php");include_once($config["base_path"]."/lib/api_graph.php");include_once($config["base_path"]."/lib/snmp.php");include_once($config["base_path"]."/lib/data_query.php");include_once($config["base_path"]."/lib/api_device.php");include_once($config["base_path"].'/lib/tree.php');include_once($config["base_path"].'/lib/api_tree.php');include_once($config["base_path"].'/lib/export.php');include_once($config["base_path"].'/lib/import.php');if (ob_get_level()) ob_end_flush();if (!$info) {	\CACTI_CLI\Utils\time_elapsed();}CACTI_CLI\Config::getInstance()->switchSiteHome($site_home);SiteInfo::getInstance();if ($domain_export) {	$cacti_template = new CactiDomainTemplate();	$cacti_template->export($domain_export);} else if ($domain_import) {	$cacti_template = new CactiDomainTemplate();	$cacti_template->import($domain_import);} else if ($db_backup) {	include $config['include_path'] . '/config.php';	$db_config = compact("site_home", "database_default", "database_username", "database_password");	$cacti_database = new CactiDatabase($config + $db_config);	$cacti_database->backup();} else if ($db_restore) {	include $config['include_path'] . '/config.php';	$db_config = compact("site_home", "database_default", "database_username", "database_password");	$cacti_database = new CactiDatabase($config + $db_config);	$cacti_database->restore();} else if ($generate_template) {	if (! file_exists($generate_template)) {		echo "ERROR : Not found graph generation rule file $generate_template\n";		echo "\n\n";		exit;	}	if ( preg_match( "/lib\/graph\/(.+?)\/(.+?)\.json$/", $generate_template, $matches ) ) {		$domain = $matches[1];		$metric = $matches[2];		$graph_template = new CactiModelTemplate( $domain, $metric );		$force = ($disable_force) ? false : true;		$options = compact('graph_template_name', 'color_style', 'color_scheme', 'force');		if ($force) {			$graph_template->delete_template($options);		}		$graph_template->generate( $options );	} else {		echo "ERROR : Invalid rule file $generate_template\n";		echo "\n\n";		exit;	}} else {	$options = compact('tenant', 'force', 'info', 'grep', 'node_path_dir', 'skip_tree', 'device_sort', 'view_sort');	$cacti_graph_set = new CactiGraphSet( $options );	$cacti_graph_set->retrieve_configs( $target_node );	if ($info) {		$cacti_graph_set->report_nodes( );	} else {		$cacti_graph_set->make_graphs( );	}}if (!$info) {	\CACTI_CLI\Utils\time_elapsed();}