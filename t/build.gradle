// パッケージインポート
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'com.profesorfalken:jPowerShell:1.6.2'
    }
}

import org.apache.commons.io.FileUtils.*
import groovy.transform.ToString
import static groovy.json.JsonOutput.*
import com.profesorfalken.jpowershell.*

// Param(
//     [string]$ip
//   , [string]$server
//   , [string]$user
//   , [string]$password
// )

// $secure   = ConvertTo-SecureString $password -asplaintext -force
// $cred     = New-Object System.Management.Automation.PsCredential $user, $secure
// $log_dir  = ".\build\log\windows\" + $server

// $log_file    = $log_dir + "\cpu"
// Get-WmiObject -Credential $cred -ComputerName $ip Win32_Processor | Out-File $log_file -Encoding UTF8

task test << {
    println "test"
    //Execute a command in PowerShell session
    PowerShellResponse response = PowerShell.executeSingleCommand("Get-Process");
    System.out.println("List Processes:" + response.getCommandOutput());
}

task test2 << {

    // 検査対象サーバアカウント情報
    def user     = getProperty("testServer.Windows.user")
    def password = getProperty("testServer.Windows.password")
    def ip       = '192.168.0.12'

    PowerShell powerShell = null;
    try {
        //Creates PowerShell session (we can execute several commands in the same session)
        powerShell = PowerShell.openSession();

        //Execute a command in PowerShell session
        def $command = """\
            |\$secure = ConvertTo-SecureString ${password} -asplaintext -force
            |\$cred   = New-Object System.Management.Automation.PsCredential ${user}, \$secure
            |Get-WmiObject -Credential \$cred -ComputerName ${ip} Win32_Processor
        """.stripMargin()
        println $command

        //Execute another command in the same PowerShell session
        PowerShellResponse response;
        response = powerShell.executeCommand($command);
        // response = powerShell.executeCommand("Get-WmiObject Win32_BIOS");

        //Print results
        System.out.println("BIOS information:" + response.getCommandOutput());
    } catch(PowerShellNotAvailableException ex) {
        //Handle error when PowerShell is not available in the system
        //Maybe try in another way?
        println ex.localizedMessage
    } finally {
        //Always close PowerShell session to free resources.
        if (powerShell != null)
            powerShell.close();
    }
}
