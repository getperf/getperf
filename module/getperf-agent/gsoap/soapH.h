/* soapH.h
   Generated by gSOAP 2.8.51 for GetperfServiceSoapcpp2.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifdef __cplusplus
extern "C" {
#endif
#ifndef WITH_NOIDREF
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);
SOAP_FMAC3 void * SOAP_FMAC4 soap_dupelement(struct soap*, const void*, int);
SOAP_FMAC3 void SOAP_FMAC4 soap_delelement(const void*, int);
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

#ifndef SOAP_TYPE_byte_DEFINED
#define SOAP_TYPE_byte_DEFINED

#ifdef SOAP_DEFAULT_byte
#define soap_default_byte(soap, a) (*(a) = SOAP_DEFAULT_byte)
#else
#define soap_default_byte(soap, a) (*(a) = (char)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 char * SOAP_FMAC4 soap_new_byte(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_byte
#define soap_PUT_byte(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_byte
#define soap_POST_send_byte(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_byte(soap, data, "byte", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_byte
#define soap_GET_byte(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_byte(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_byte
#define soap_POST_recv_byte(soap, data) ( soap_read_byte(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_int_DEFINED
#define SOAP_TYPE_int_DEFINED

#ifdef SOAP_DEFAULT_int
#define soap_default_int(soap, a) (*(a) = SOAP_DEFAULT_int)
#else
#define soap_default_int(soap, a) (*(a) = (int)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int * SOAP_FMAC4 soap_new_int(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_int
#define soap_PUT_int(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_int
#define soap_POST_send_int(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_int(soap, data, "int", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_int
#define soap_GET_int(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_int(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_int
#define soap_POST_recv_int(soap, data) ( soap_read_int(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_long_DEFINED
#define SOAP_TYPE_long_DEFINED

#ifdef SOAP_DEFAULT_long
#define soap_default_long(soap, a) (*(a) = SOAP_DEFAULT_long)
#else
#define soap_default_long(soap, a) (*(a) = (long)0)
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_out_long(struct soap*, const char*, int, const long *, const char*);
SOAP_FMAC3 long * SOAP_FMAC4 soap_in_long(struct soap*, const char*, long *, const char*);

SOAP_FMAC3 long * SOAP_FMAC4 soap_new_long(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_long(struct soap*, const long *, const char*, const char*);

#ifndef soap_write_long
#define soap_write_long(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_long(soap, data, "long", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_long
#define soap_PUT_long(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_long(soap, data, "long", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_long
#define soap_POST_send_long(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_long(soap, data, "long", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 long * SOAP_FMAC4 soap_get_long(struct soap*, long *, const char*, const char*);

#ifndef soap_read_long
#define soap_read_long(soap, data) ( soap_begin_recv(soap) || !soap_get_long(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_long
#define soap_GET_long(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_long(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_long
#define soap_POST_recv_long(soap, data) ( soap_read_long(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault_DEFINED
#define SOAP_TYPE_SOAP_ENV__Fault_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_new_SOAP_ENV__Fault(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Fault
#define soap_PUT_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_SOAP_ENV__Fault
#define soap_POST_send_SOAP_ENV__Fault(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Fault(soap, data), 0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Fault(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Fault
#define soap_GET_SOAP_ENV__Fault(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Fault(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Fault
#define soap_POST_recv_SOAP_ENV__Fault(soap, data) ( soap_read_SOAP_ENV__Fault(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_SOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_new_SOAP_ENV__Reason(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Reason
#define soap_PUT_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_SOAP_ENV__Reason
#define soap_POST_send_SOAP_ENV__Reason(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Reason(soap, data), 0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Reason(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Reason
#define soap_GET_SOAP_ENV__Reason(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Reason(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Reason
#define soap_POST_recv_SOAP_ENV__Reason(soap, data) ( soap_read_SOAP_ENV__Reason(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_SOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_new_SOAP_ENV__Detail(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Detail
#define soap_PUT_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_SOAP_ENV__Detail
#define soap_POST_send_SOAP_ENV__Detail(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Detail(soap, data), 0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Detail(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Detail
#define soap_GET_SOAP_ENV__Detail(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Detail(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Detail
#define soap_POST_recv_SOAP_ENV__Detail(soap, data) ( soap_read_SOAP_ENV__Detail(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code_DEFINED
#define SOAP_TYPE_SOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_new_SOAP_ENV__Code(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Code
#define soap_PUT_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_SOAP_ENV__Code
#define soap_POST_send_SOAP_ENV__Code(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Code(soap, data), 0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Code(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Code
#define soap_GET_SOAP_ENV__Code(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Code(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Code
#define soap_POST_recv_SOAP_ENV__Code(soap, data) ( soap_read_SOAP_ENV__Code(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header_DEFINED
#define SOAP_TYPE_SOAP_ENV__Header_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_new_SOAP_ENV__Header(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_SOAP_ENV__Header
#define soap_PUT_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_SOAP_ENV__Header
#define soap_POST_send_SOAP_ENV__Header(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_SOAP_ENV__Header(soap, data), 0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( ((data) ? (soap_default_SOAP_ENV__Header(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_SOAP_ENV__Header
#define soap_GET_SOAP_ENV__Header(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_SOAP_ENV__Header(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_SOAP_ENV__Header
#define soap_POST_recv_SOAP_ENV__Header(soap, data) ( soap_read_SOAP_ENV__Header(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#endif

#ifndef SOAP_TYPE_ns2__downloadUpdateModule_DEFINED
#define SOAP_TYPE_ns2__downloadUpdateModule_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__downloadUpdateModule(struct soap*, struct ns2__downloadUpdateModule *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__downloadUpdateModule(struct soap*, const struct ns2__downloadUpdateModule *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__downloadUpdateModule(struct soap*, const char*, int, const struct ns2__downloadUpdateModule *, const char*);
SOAP_FMAC3 struct ns2__downloadUpdateModule * SOAP_FMAC4 soap_in_ns2__downloadUpdateModule(struct soap*, const char*, struct ns2__downloadUpdateModule *, const char*);

SOAP_FMAC3 struct ns2__downloadUpdateModule * SOAP_FMAC4 soap_new_ns2__downloadUpdateModule(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__downloadUpdateModule(struct soap*, const struct ns2__downloadUpdateModule *, const char*, const char*);

#ifndef soap_write_ns2__downloadUpdateModule
#define soap_write_ns2__downloadUpdateModule(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__downloadUpdateModule(soap, data), 0) || soap_put_ns2__downloadUpdateModule(soap, data, "ns2:downloadUpdateModule", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__downloadUpdateModule
#define soap_PUT_ns2__downloadUpdateModule(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__downloadUpdateModule(soap, data), 0) || soap_put_ns2__downloadUpdateModule(soap, data, "ns2:downloadUpdateModule", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__downloadUpdateModule
#define soap_POST_send_ns2__downloadUpdateModule(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__downloadUpdateModule(soap, data), 0) || soap_put_ns2__downloadUpdateModule(soap, data, "ns2:downloadUpdateModule", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__downloadUpdateModule * SOAP_FMAC4 soap_get_ns2__downloadUpdateModule(struct soap*, struct ns2__downloadUpdateModule *, const char*, const char*);

#ifndef soap_read_ns2__downloadUpdateModule
#define soap_read_ns2__downloadUpdateModule(soap, data) ( ((data) ? (soap_default_ns2__downloadUpdateModule(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__downloadUpdateModule(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__downloadUpdateModule
#define soap_GET_ns2__downloadUpdateModule(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__downloadUpdateModule(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__downloadUpdateModule
#define soap_POST_recv_ns2__downloadUpdateModule(soap, data) ( soap_read_ns2__downloadUpdateModule(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__downloadUpdateModuleResponse_DEFINED
#define SOAP_TYPE_ns2__downloadUpdateModuleResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__downloadUpdateModuleResponse(struct soap*, struct ns2__downloadUpdateModuleResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__downloadUpdateModuleResponse(struct soap*, const struct ns2__downloadUpdateModuleResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__downloadUpdateModuleResponse(struct soap*, const char*, int, const struct ns2__downloadUpdateModuleResponse *, const char*);
SOAP_FMAC3 struct ns2__downloadUpdateModuleResponse * SOAP_FMAC4 soap_in_ns2__downloadUpdateModuleResponse(struct soap*, const char*, struct ns2__downloadUpdateModuleResponse *, const char*);

SOAP_FMAC3 struct ns2__downloadUpdateModuleResponse * SOAP_FMAC4 soap_new_ns2__downloadUpdateModuleResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__downloadUpdateModuleResponse(struct soap*, const struct ns2__downloadUpdateModuleResponse *, const char*, const char*);

#ifndef soap_write_ns2__downloadUpdateModuleResponse
#define soap_write_ns2__downloadUpdateModuleResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__downloadUpdateModuleResponse(soap, data), 0) || soap_put_ns2__downloadUpdateModuleResponse(soap, data, "ns2:downloadUpdateModuleResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__downloadUpdateModuleResponse
#define soap_PUT_ns2__downloadUpdateModuleResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__downloadUpdateModuleResponse(soap, data), 0) || soap_put_ns2__downloadUpdateModuleResponse(soap, data, "ns2:downloadUpdateModuleResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__downloadUpdateModuleResponse
#define soap_POST_send_ns2__downloadUpdateModuleResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__downloadUpdateModuleResponse(soap, data), 0) || soap_put_ns2__downloadUpdateModuleResponse(soap, data, "ns2:downloadUpdateModuleResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__downloadUpdateModuleResponse * SOAP_FMAC4 soap_get_ns2__downloadUpdateModuleResponse(struct soap*, struct ns2__downloadUpdateModuleResponse *, const char*, const char*);

#ifndef soap_read_ns2__downloadUpdateModuleResponse
#define soap_read_ns2__downloadUpdateModuleResponse(soap, data) ( ((data) ? (soap_default_ns2__downloadUpdateModuleResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__downloadUpdateModuleResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__downloadUpdateModuleResponse
#define soap_GET_ns2__downloadUpdateModuleResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__downloadUpdateModuleResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__downloadUpdateModuleResponse
#define soap_POST_recv_ns2__downloadUpdateModuleResponse(soap, data) ( soap_read_ns2__downloadUpdateModuleResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__getLatestBuild_DEFINED
#define SOAP_TYPE_ns2__getLatestBuild_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getLatestBuild(struct soap*, struct ns2__getLatestBuild *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getLatestBuild(struct soap*, const struct ns2__getLatestBuild *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getLatestBuild(struct soap*, const char*, int, const struct ns2__getLatestBuild *, const char*);
SOAP_FMAC3 struct ns2__getLatestBuild * SOAP_FMAC4 soap_in_ns2__getLatestBuild(struct soap*, const char*, struct ns2__getLatestBuild *, const char*);

SOAP_FMAC3 struct ns2__getLatestBuild * SOAP_FMAC4 soap_new_ns2__getLatestBuild(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getLatestBuild(struct soap*, const struct ns2__getLatestBuild *, const char*, const char*);

#ifndef soap_write_ns2__getLatestBuild
#define soap_write_ns2__getLatestBuild(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__getLatestBuild(soap, data), 0) || soap_put_ns2__getLatestBuild(soap, data, "ns2:getLatestBuild", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__getLatestBuild
#define soap_PUT_ns2__getLatestBuild(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__getLatestBuild(soap, data), 0) || soap_put_ns2__getLatestBuild(soap, data, "ns2:getLatestBuild", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__getLatestBuild
#define soap_POST_send_ns2__getLatestBuild(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__getLatestBuild(soap, data), 0) || soap_put_ns2__getLatestBuild(soap, data, "ns2:getLatestBuild", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__getLatestBuild * SOAP_FMAC4 soap_get_ns2__getLatestBuild(struct soap*, struct ns2__getLatestBuild *, const char*, const char*);

#ifndef soap_read_ns2__getLatestBuild
#define soap_read_ns2__getLatestBuild(soap, data) ( ((data) ? (soap_default_ns2__getLatestBuild(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__getLatestBuild(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__getLatestBuild
#define soap_GET_ns2__getLatestBuild(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__getLatestBuild(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__getLatestBuild
#define soap_POST_recv_ns2__getLatestBuild(soap, data) ( soap_read_ns2__getLatestBuild(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__getLatestBuildResponse_DEFINED
#define SOAP_TYPE_ns2__getLatestBuildResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__getLatestBuildResponse(struct soap*, struct ns2__getLatestBuildResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__getLatestBuildResponse(struct soap*, const struct ns2__getLatestBuildResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__getLatestBuildResponse(struct soap*, const char*, int, const struct ns2__getLatestBuildResponse *, const char*);
SOAP_FMAC3 struct ns2__getLatestBuildResponse * SOAP_FMAC4 soap_in_ns2__getLatestBuildResponse(struct soap*, const char*, struct ns2__getLatestBuildResponse *, const char*);

SOAP_FMAC3 struct ns2__getLatestBuildResponse * SOAP_FMAC4 soap_new_ns2__getLatestBuildResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__getLatestBuildResponse(struct soap*, const struct ns2__getLatestBuildResponse *, const char*, const char*);

#ifndef soap_write_ns2__getLatestBuildResponse
#define soap_write_ns2__getLatestBuildResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__getLatestBuildResponse(soap, data), 0) || soap_put_ns2__getLatestBuildResponse(soap, data, "ns2:getLatestBuildResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__getLatestBuildResponse
#define soap_PUT_ns2__getLatestBuildResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__getLatestBuildResponse(soap, data), 0) || soap_put_ns2__getLatestBuildResponse(soap, data, "ns2:getLatestBuildResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__getLatestBuildResponse
#define soap_POST_send_ns2__getLatestBuildResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__getLatestBuildResponse(soap, data), 0) || soap_put_ns2__getLatestBuildResponse(soap, data, "ns2:getLatestBuildResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__getLatestBuildResponse * SOAP_FMAC4 soap_get_ns2__getLatestBuildResponse(struct soap*, struct ns2__getLatestBuildResponse *, const char*, const char*);

#ifndef soap_read_ns2__getLatestBuildResponse
#define soap_read_ns2__getLatestBuildResponse(soap, data) ( ((data) ? (soap_default_ns2__getLatestBuildResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__getLatestBuildResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__getLatestBuildResponse
#define soap_GET_ns2__getLatestBuildResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__getLatestBuildResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__getLatestBuildResponse
#define soap_POST_recv_ns2__getLatestBuildResponse(soap, data) ( soap_read_ns2__getLatestBuildResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__registAgent_DEFINED
#define SOAP_TYPE_ns2__registAgent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__registAgent(struct soap*, struct ns2__registAgent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__registAgent(struct soap*, const struct ns2__registAgent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__registAgent(struct soap*, const char*, int, const struct ns2__registAgent *, const char*);
SOAP_FMAC3 struct ns2__registAgent * SOAP_FMAC4 soap_in_ns2__registAgent(struct soap*, const char*, struct ns2__registAgent *, const char*);

SOAP_FMAC3 struct ns2__registAgent * SOAP_FMAC4 soap_new_ns2__registAgent(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__registAgent(struct soap*, const struct ns2__registAgent *, const char*, const char*);

#ifndef soap_write_ns2__registAgent
#define soap_write_ns2__registAgent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__registAgent(soap, data), 0) || soap_put_ns2__registAgent(soap, data, "ns2:registAgent", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__registAgent
#define soap_PUT_ns2__registAgent(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__registAgent(soap, data), 0) || soap_put_ns2__registAgent(soap, data, "ns2:registAgent", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__registAgent
#define soap_POST_send_ns2__registAgent(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__registAgent(soap, data), 0) || soap_put_ns2__registAgent(soap, data, "ns2:registAgent", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__registAgent * SOAP_FMAC4 soap_get_ns2__registAgent(struct soap*, struct ns2__registAgent *, const char*, const char*);

#ifndef soap_read_ns2__registAgent
#define soap_read_ns2__registAgent(soap, data) ( ((data) ? (soap_default_ns2__registAgent(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__registAgent(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__registAgent
#define soap_GET_ns2__registAgent(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__registAgent(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__registAgent
#define soap_POST_recv_ns2__registAgent(soap, data) ( soap_read_ns2__registAgent(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__registAgentResponse_DEFINED
#define SOAP_TYPE_ns2__registAgentResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__registAgentResponse(struct soap*, struct ns2__registAgentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__registAgentResponse(struct soap*, const struct ns2__registAgentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__registAgentResponse(struct soap*, const char*, int, const struct ns2__registAgentResponse *, const char*);
SOAP_FMAC3 struct ns2__registAgentResponse * SOAP_FMAC4 soap_in_ns2__registAgentResponse(struct soap*, const char*, struct ns2__registAgentResponse *, const char*);

SOAP_FMAC3 struct ns2__registAgentResponse * SOAP_FMAC4 soap_new_ns2__registAgentResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__registAgentResponse(struct soap*, const struct ns2__registAgentResponse *, const char*, const char*);

#ifndef soap_write_ns2__registAgentResponse
#define soap_write_ns2__registAgentResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__registAgentResponse(soap, data), 0) || soap_put_ns2__registAgentResponse(soap, data, "ns2:registAgentResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__registAgentResponse
#define soap_PUT_ns2__registAgentResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__registAgentResponse(soap, data), 0) || soap_put_ns2__registAgentResponse(soap, data, "ns2:registAgentResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__registAgentResponse
#define soap_POST_send_ns2__registAgentResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__registAgentResponse(soap, data), 0) || soap_put_ns2__registAgentResponse(soap, data, "ns2:registAgentResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__registAgentResponse * SOAP_FMAC4 soap_get_ns2__registAgentResponse(struct soap*, struct ns2__registAgentResponse *, const char*, const char*);

#ifndef soap_read_ns2__registAgentResponse
#define soap_read_ns2__registAgentResponse(soap, data) ( ((data) ? (soap_default_ns2__registAgentResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__registAgentResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__registAgentResponse
#define soap_GET_ns2__registAgentResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__registAgentResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__registAgentResponse
#define soap_POST_recv_ns2__registAgentResponse(soap, data) ( soap_read_ns2__registAgentResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__checkAgent_DEFINED
#define SOAP_TYPE_ns2__checkAgent_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__checkAgent(struct soap*, struct ns2__checkAgent *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__checkAgent(struct soap*, const struct ns2__checkAgent *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__checkAgent(struct soap*, const char*, int, const struct ns2__checkAgent *, const char*);
SOAP_FMAC3 struct ns2__checkAgent * SOAP_FMAC4 soap_in_ns2__checkAgent(struct soap*, const char*, struct ns2__checkAgent *, const char*);

SOAP_FMAC3 struct ns2__checkAgent * SOAP_FMAC4 soap_new_ns2__checkAgent(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__checkAgent(struct soap*, const struct ns2__checkAgent *, const char*, const char*);

#ifndef soap_write_ns2__checkAgent
#define soap_write_ns2__checkAgent(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__checkAgent(soap, data), 0) || soap_put_ns2__checkAgent(soap, data, "ns2:checkAgent", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__checkAgent
#define soap_PUT_ns2__checkAgent(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__checkAgent(soap, data), 0) || soap_put_ns2__checkAgent(soap, data, "ns2:checkAgent", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__checkAgent
#define soap_POST_send_ns2__checkAgent(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__checkAgent(soap, data), 0) || soap_put_ns2__checkAgent(soap, data, "ns2:checkAgent", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__checkAgent * SOAP_FMAC4 soap_get_ns2__checkAgent(struct soap*, struct ns2__checkAgent *, const char*, const char*);

#ifndef soap_read_ns2__checkAgent
#define soap_read_ns2__checkAgent(soap, data) ( ((data) ? (soap_default_ns2__checkAgent(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__checkAgent(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__checkAgent
#define soap_GET_ns2__checkAgent(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__checkAgent(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__checkAgent
#define soap_POST_recv_ns2__checkAgent(soap, data) ( soap_read_ns2__checkAgent(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns2__checkAgentResponse_DEFINED
#define SOAP_TYPE_ns2__checkAgentResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns2__checkAgentResponse(struct soap*, struct ns2__checkAgentResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns2__checkAgentResponse(struct soap*, const struct ns2__checkAgentResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns2__checkAgentResponse(struct soap*, const char*, int, const struct ns2__checkAgentResponse *, const char*);
SOAP_FMAC3 struct ns2__checkAgentResponse * SOAP_FMAC4 soap_in_ns2__checkAgentResponse(struct soap*, const char*, struct ns2__checkAgentResponse *, const char*);

SOAP_FMAC3 struct ns2__checkAgentResponse * SOAP_FMAC4 soap_new_ns2__checkAgentResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns2__checkAgentResponse(struct soap*, const struct ns2__checkAgentResponse *, const char*, const char*);

#ifndef soap_write_ns2__checkAgentResponse
#define soap_write_ns2__checkAgentResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns2__checkAgentResponse(soap, data), 0) || soap_put_ns2__checkAgentResponse(soap, data, "ns2:checkAgentResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns2__checkAgentResponse
#define soap_PUT_ns2__checkAgentResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__checkAgentResponse(soap, data), 0) || soap_put_ns2__checkAgentResponse(soap, data, "ns2:checkAgentResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns2__checkAgentResponse
#define soap_POST_send_ns2__checkAgentResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns2__checkAgentResponse(soap, data), 0) || soap_put_ns2__checkAgentResponse(soap, data, "ns2:checkAgentResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns2__checkAgentResponse * SOAP_FMAC4 soap_get_ns2__checkAgentResponse(struct soap*, struct ns2__checkAgentResponse *, const char*, const char*);

#ifndef soap_read_ns2__checkAgentResponse
#define soap_read_ns2__checkAgentResponse(soap, data) ( ((data) ? (soap_default_ns2__checkAgentResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns2__checkAgentResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns2__checkAgentResponse
#define soap_GET_ns2__checkAgentResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns2__checkAgentResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns2__checkAgentResponse
#define soap_POST_recv_ns2__checkAgentResponse(soap, data) ( soap_read_ns2__checkAgentResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendMessage_DEFINED
#define SOAP_TYPE_ns1__sendMessage_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendMessage(struct soap*, struct ns1__sendMessage *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendMessage(struct soap*, const struct ns1__sendMessage *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendMessage(struct soap*, const char*, int, const struct ns1__sendMessage *, const char*);
SOAP_FMAC3 struct ns1__sendMessage * SOAP_FMAC4 soap_in_ns1__sendMessage(struct soap*, const char*, struct ns1__sendMessage *, const char*);

SOAP_FMAC3 struct ns1__sendMessage * SOAP_FMAC4 soap_new_ns1__sendMessage(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendMessage(struct soap*, const struct ns1__sendMessage *, const char*, const char*);

#ifndef soap_write_ns1__sendMessage
#define soap_write_ns1__sendMessage(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendMessage(soap, data), 0) || soap_put_ns1__sendMessage(soap, data, "ns1:sendMessage", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendMessage
#define soap_PUT_ns1__sendMessage(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendMessage(soap, data), 0) || soap_put_ns1__sendMessage(soap, data, "ns1:sendMessage", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendMessage
#define soap_POST_send_ns1__sendMessage(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendMessage(soap, data), 0) || soap_put_ns1__sendMessage(soap, data, "ns1:sendMessage", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendMessage * SOAP_FMAC4 soap_get_ns1__sendMessage(struct soap*, struct ns1__sendMessage *, const char*, const char*);

#ifndef soap_read_ns1__sendMessage
#define soap_read_ns1__sendMessage(soap, data) ( ((data) ? (soap_default_ns1__sendMessage(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendMessage(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendMessage
#define soap_GET_ns1__sendMessage(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendMessage(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendMessage
#define soap_POST_recv_ns1__sendMessage(soap, data) ( soap_read_ns1__sendMessage(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendMessageResponse_DEFINED
#define SOAP_TYPE_ns1__sendMessageResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendMessageResponse(struct soap*, struct ns1__sendMessageResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendMessageResponse(struct soap*, const struct ns1__sendMessageResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendMessageResponse(struct soap*, const char*, int, const struct ns1__sendMessageResponse *, const char*);
SOAP_FMAC3 struct ns1__sendMessageResponse * SOAP_FMAC4 soap_in_ns1__sendMessageResponse(struct soap*, const char*, struct ns1__sendMessageResponse *, const char*);

SOAP_FMAC3 struct ns1__sendMessageResponse * SOAP_FMAC4 soap_new_ns1__sendMessageResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendMessageResponse(struct soap*, const struct ns1__sendMessageResponse *, const char*, const char*);

#ifndef soap_write_ns1__sendMessageResponse
#define soap_write_ns1__sendMessageResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendMessageResponse(soap, data), 0) || soap_put_ns1__sendMessageResponse(soap, data, "ns1:sendMessageResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendMessageResponse
#define soap_PUT_ns1__sendMessageResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendMessageResponse(soap, data), 0) || soap_put_ns1__sendMessageResponse(soap, data, "ns1:sendMessageResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendMessageResponse
#define soap_POST_send_ns1__sendMessageResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendMessageResponse(soap, data), 0) || soap_put_ns1__sendMessageResponse(soap, data, "ns1:sendMessageResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendMessageResponse * SOAP_FMAC4 soap_get_ns1__sendMessageResponse(struct soap*, struct ns1__sendMessageResponse *, const char*, const char*);

#ifndef soap_read_ns1__sendMessageResponse
#define soap_read_ns1__sendMessageResponse(soap, data) ( ((data) ? (soap_default_ns1__sendMessageResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendMessageResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendMessageResponse
#define soap_GET_ns1__sendMessageResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendMessageResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendMessageResponse
#define soap_POST_recv_ns1__sendMessageResponse(soap, data) ( soap_read_ns1__sendMessageResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__downloadCertificate_DEFINED
#define SOAP_TYPE_ns1__downloadCertificate_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__downloadCertificate(struct soap*, struct ns1__downloadCertificate *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__downloadCertificate(struct soap*, const struct ns1__downloadCertificate *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__downloadCertificate(struct soap*, const char*, int, const struct ns1__downloadCertificate *, const char*);
SOAP_FMAC3 struct ns1__downloadCertificate * SOAP_FMAC4 soap_in_ns1__downloadCertificate(struct soap*, const char*, struct ns1__downloadCertificate *, const char*);

SOAP_FMAC3 struct ns1__downloadCertificate * SOAP_FMAC4 soap_new_ns1__downloadCertificate(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__downloadCertificate(struct soap*, const struct ns1__downloadCertificate *, const char*, const char*);

#ifndef soap_write_ns1__downloadCertificate
#define soap_write_ns1__downloadCertificate(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__downloadCertificate(soap, data), 0) || soap_put_ns1__downloadCertificate(soap, data, "ns1:downloadCertificate", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__downloadCertificate
#define soap_PUT_ns1__downloadCertificate(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__downloadCertificate(soap, data), 0) || soap_put_ns1__downloadCertificate(soap, data, "ns1:downloadCertificate", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__downloadCertificate
#define soap_POST_send_ns1__downloadCertificate(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__downloadCertificate(soap, data), 0) || soap_put_ns1__downloadCertificate(soap, data, "ns1:downloadCertificate", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__downloadCertificate * SOAP_FMAC4 soap_get_ns1__downloadCertificate(struct soap*, struct ns1__downloadCertificate *, const char*, const char*);

#ifndef soap_read_ns1__downloadCertificate
#define soap_read_ns1__downloadCertificate(soap, data) ( ((data) ? (soap_default_ns1__downloadCertificate(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__downloadCertificate(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__downloadCertificate
#define soap_GET_ns1__downloadCertificate(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__downloadCertificate(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__downloadCertificate
#define soap_POST_recv_ns1__downloadCertificate(soap, data) ( soap_read_ns1__downloadCertificate(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__downloadCertificateResponse_DEFINED
#define SOAP_TYPE_ns1__downloadCertificateResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__downloadCertificateResponse(struct soap*, struct ns1__downloadCertificateResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__downloadCertificateResponse(struct soap*, const struct ns1__downloadCertificateResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__downloadCertificateResponse(struct soap*, const char*, int, const struct ns1__downloadCertificateResponse *, const char*);
SOAP_FMAC3 struct ns1__downloadCertificateResponse * SOAP_FMAC4 soap_in_ns1__downloadCertificateResponse(struct soap*, const char*, struct ns1__downloadCertificateResponse *, const char*);

SOAP_FMAC3 struct ns1__downloadCertificateResponse * SOAP_FMAC4 soap_new_ns1__downloadCertificateResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__downloadCertificateResponse(struct soap*, const struct ns1__downloadCertificateResponse *, const char*, const char*);

#ifndef soap_write_ns1__downloadCertificateResponse
#define soap_write_ns1__downloadCertificateResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__downloadCertificateResponse(soap, data), 0) || soap_put_ns1__downloadCertificateResponse(soap, data, "ns1:downloadCertificateResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__downloadCertificateResponse
#define soap_PUT_ns1__downloadCertificateResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__downloadCertificateResponse(soap, data), 0) || soap_put_ns1__downloadCertificateResponse(soap, data, "ns1:downloadCertificateResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__downloadCertificateResponse
#define soap_POST_send_ns1__downloadCertificateResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__downloadCertificateResponse(soap, data), 0) || soap_put_ns1__downloadCertificateResponse(soap, data, "ns1:downloadCertificateResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__downloadCertificateResponse * SOAP_FMAC4 soap_get_ns1__downloadCertificateResponse(struct soap*, struct ns1__downloadCertificateResponse *, const char*, const char*);

#ifndef soap_read_ns1__downloadCertificateResponse
#define soap_read_ns1__downloadCertificateResponse(soap, data) ( ((data) ? (soap_default_ns1__downloadCertificateResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__downloadCertificateResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__downloadCertificateResponse
#define soap_GET_ns1__downloadCertificateResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__downloadCertificateResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__downloadCertificateResponse
#define soap_POST_recv_ns1__downloadCertificateResponse(soap, data) ( soap_read_ns1__downloadCertificateResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendData_DEFINED
#define SOAP_TYPE_ns1__sendData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendData(struct soap*, struct ns1__sendData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendData(struct soap*, const struct ns1__sendData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendData(struct soap*, const char*, int, const struct ns1__sendData *, const char*);
SOAP_FMAC3 struct ns1__sendData * SOAP_FMAC4 soap_in_ns1__sendData(struct soap*, const char*, struct ns1__sendData *, const char*);

SOAP_FMAC3 struct ns1__sendData * SOAP_FMAC4 soap_new_ns1__sendData(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendData(struct soap*, const struct ns1__sendData *, const char*, const char*);

#ifndef soap_write_ns1__sendData
#define soap_write_ns1__sendData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendData(soap, data), 0) || soap_put_ns1__sendData(soap, data, "ns1:sendData", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendData
#define soap_PUT_ns1__sendData(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendData(soap, data), 0) || soap_put_ns1__sendData(soap, data, "ns1:sendData", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendData
#define soap_POST_send_ns1__sendData(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendData(soap, data), 0) || soap_put_ns1__sendData(soap, data, "ns1:sendData", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendData * SOAP_FMAC4 soap_get_ns1__sendData(struct soap*, struct ns1__sendData *, const char*, const char*);

#ifndef soap_read_ns1__sendData
#define soap_read_ns1__sendData(soap, data) ( ((data) ? (soap_default_ns1__sendData(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendData(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendData
#define soap_GET_ns1__sendData(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendData(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendData
#define soap_POST_recv_ns1__sendData(soap, data) ( soap_read_ns1__sendData(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendDataResponse_DEFINED
#define SOAP_TYPE_ns1__sendDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendDataResponse(struct soap*, struct ns1__sendDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendDataResponse(struct soap*, const struct ns1__sendDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendDataResponse(struct soap*, const char*, int, const struct ns1__sendDataResponse *, const char*);
SOAP_FMAC3 struct ns1__sendDataResponse * SOAP_FMAC4 soap_in_ns1__sendDataResponse(struct soap*, const char*, struct ns1__sendDataResponse *, const char*);

SOAP_FMAC3 struct ns1__sendDataResponse * SOAP_FMAC4 soap_new_ns1__sendDataResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendDataResponse(struct soap*, const struct ns1__sendDataResponse *, const char*, const char*);

#ifndef soap_write_ns1__sendDataResponse
#define soap_write_ns1__sendDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendDataResponse(soap, data), 0) || soap_put_ns1__sendDataResponse(soap, data, "ns1:sendDataResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendDataResponse
#define soap_PUT_ns1__sendDataResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendDataResponse(soap, data), 0) || soap_put_ns1__sendDataResponse(soap, data, "ns1:sendDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendDataResponse
#define soap_POST_send_ns1__sendDataResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendDataResponse(soap, data), 0) || soap_put_ns1__sendDataResponse(soap, data, "ns1:sendDataResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendDataResponse * SOAP_FMAC4 soap_get_ns1__sendDataResponse(struct soap*, struct ns1__sendDataResponse *, const char*, const char*);

#ifndef soap_read_ns1__sendDataResponse
#define soap_read_ns1__sendDataResponse(soap, data) ( ((data) ? (soap_default_ns1__sendDataResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendDataResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendDataResponse
#define soap_GET_ns1__sendDataResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendDataResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendDataResponse
#define soap_POST_recv_ns1__sendDataResponse(soap, data) ( soap_read_ns1__sendDataResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__reserveSender_DEFINED
#define SOAP_TYPE_ns1__reserveSender_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__reserveSender(struct soap*, struct ns1__reserveSender *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__reserveSender(struct soap*, const struct ns1__reserveSender *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reserveSender(struct soap*, const char*, int, const struct ns1__reserveSender *, const char*);
SOAP_FMAC3 struct ns1__reserveSender * SOAP_FMAC4 soap_in_ns1__reserveSender(struct soap*, const char*, struct ns1__reserveSender *, const char*);

SOAP_FMAC3 struct ns1__reserveSender * SOAP_FMAC4 soap_new_ns1__reserveSender(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__reserveSender(struct soap*, const struct ns1__reserveSender *, const char*, const char*);

#ifndef soap_write_ns1__reserveSender
#define soap_write_ns1__reserveSender(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__reserveSender(soap, data), 0) || soap_put_ns1__reserveSender(soap, data, "ns1:reserveSender", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__reserveSender
#define soap_PUT_ns1__reserveSender(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSender(soap, data), 0) || soap_put_ns1__reserveSender(soap, data, "ns1:reserveSender", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__reserveSender
#define soap_POST_send_ns1__reserveSender(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSender(soap, data), 0) || soap_put_ns1__reserveSender(soap, data, "ns1:reserveSender", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__reserveSender * SOAP_FMAC4 soap_get_ns1__reserveSender(struct soap*, struct ns1__reserveSender *, const char*, const char*);

#ifndef soap_read_ns1__reserveSender
#define soap_read_ns1__reserveSender(soap, data) ( ((data) ? (soap_default_ns1__reserveSender(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__reserveSender(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__reserveSender
#define soap_GET_ns1__reserveSender(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__reserveSender(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__reserveSender
#define soap_POST_recv_ns1__reserveSender(soap, data) ( soap_read_ns1__reserveSender(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__reserveSenderResponse_DEFINED
#define SOAP_TYPE_ns1__reserveSenderResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__reserveSenderResponse(struct soap*, struct ns1__reserveSenderResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__reserveSenderResponse(struct soap*, const struct ns1__reserveSenderResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reserveSenderResponse(struct soap*, const char*, int, const struct ns1__reserveSenderResponse *, const char*);
SOAP_FMAC3 struct ns1__reserveSenderResponse * SOAP_FMAC4 soap_in_ns1__reserveSenderResponse(struct soap*, const char*, struct ns1__reserveSenderResponse *, const char*);

SOAP_FMAC3 struct ns1__reserveSenderResponse * SOAP_FMAC4 soap_new_ns1__reserveSenderResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__reserveSenderResponse(struct soap*, const struct ns1__reserveSenderResponse *, const char*, const char*);

#ifndef soap_write_ns1__reserveSenderResponse
#define soap_write_ns1__reserveSenderResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__reserveSenderResponse(soap, data), 0) || soap_put_ns1__reserveSenderResponse(soap, data, "ns1:reserveSenderResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__reserveSenderResponse
#define soap_PUT_ns1__reserveSenderResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSenderResponse(soap, data), 0) || soap_put_ns1__reserveSenderResponse(soap, data, "ns1:reserveSenderResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__reserveSenderResponse
#define soap_POST_send_ns1__reserveSenderResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSenderResponse(soap, data), 0) || soap_put_ns1__reserveSenderResponse(soap, data, "ns1:reserveSenderResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__reserveSenderResponse * SOAP_FMAC4 soap_get_ns1__reserveSenderResponse(struct soap*, struct ns1__reserveSenderResponse *, const char*, const char*);

#ifndef soap_read_ns1__reserveSenderResponse
#define soap_read_ns1__reserveSenderResponse(soap, data) ( ((data) ? (soap_default_ns1__reserveSenderResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__reserveSenderResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__reserveSenderResponse
#define soap_GET_ns1__reserveSenderResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__reserveSenderResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__reserveSenderResponse
#define soap_POST_recv_ns1__reserveSenderResponse(soap, data) ( soap_read_ns1__reserveSenderResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendPerfData_DEFINED
#define SOAP_TYPE_ns1__sendPerfData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendPerfData(struct soap*, struct ns1__sendPerfData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendPerfData(struct soap*, const struct ns1__sendPerfData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendPerfData(struct soap*, const char*, int, const struct ns1__sendPerfData *, const char*);
SOAP_FMAC3 struct ns1__sendPerfData * SOAP_FMAC4 soap_in_ns1__sendPerfData(struct soap*, const char*, struct ns1__sendPerfData *, const char*);

SOAP_FMAC3 struct ns1__sendPerfData * SOAP_FMAC4 soap_new_ns1__sendPerfData(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendPerfData(struct soap*, const struct ns1__sendPerfData *, const char*, const char*);

#ifndef soap_write_ns1__sendPerfData
#define soap_write_ns1__sendPerfData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendPerfData(soap, data), 0) || soap_put_ns1__sendPerfData(soap, data, "ns1:sendPerfData", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendPerfData
#define soap_PUT_ns1__sendPerfData(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendPerfData(soap, data), 0) || soap_put_ns1__sendPerfData(soap, data, "ns1:sendPerfData", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendPerfData
#define soap_POST_send_ns1__sendPerfData(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendPerfData(soap, data), 0) || soap_put_ns1__sendPerfData(soap, data, "ns1:sendPerfData", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendPerfData * SOAP_FMAC4 soap_get_ns1__sendPerfData(struct soap*, struct ns1__sendPerfData *, const char*, const char*);

#ifndef soap_read_ns1__sendPerfData
#define soap_read_ns1__sendPerfData(soap, data) ( ((data) ? (soap_default_ns1__sendPerfData(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendPerfData(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendPerfData
#define soap_GET_ns1__sendPerfData(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendPerfData(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendPerfData
#define soap_POST_recv_ns1__sendPerfData(soap, data) ( soap_read_ns1__sendPerfData(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendPerfDataResponse_DEFINED
#define SOAP_TYPE_ns1__sendPerfDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendPerfDataResponse(struct soap*, struct ns1__sendPerfDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendPerfDataResponse(struct soap*, const struct ns1__sendPerfDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendPerfDataResponse(struct soap*, const char*, int, const struct ns1__sendPerfDataResponse *, const char*);
SOAP_FMAC3 struct ns1__sendPerfDataResponse * SOAP_FMAC4 soap_in_ns1__sendPerfDataResponse(struct soap*, const char*, struct ns1__sendPerfDataResponse *, const char*);

SOAP_FMAC3 struct ns1__sendPerfDataResponse * SOAP_FMAC4 soap_new_ns1__sendPerfDataResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendPerfDataResponse(struct soap*, const struct ns1__sendPerfDataResponse *, const char*, const char*);

#ifndef soap_write_ns1__sendPerfDataResponse
#define soap_write_ns1__sendPerfDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendPerfDataResponse(soap, data), 0) || soap_put_ns1__sendPerfDataResponse(soap, data, "ns1:sendPerfDataResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendPerfDataResponse
#define soap_PUT_ns1__sendPerfDataResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendPerfDataResponse(soap, data), 0) || soap_put_ns1__sendPerfDataResponse(soap, data, "ns1:sendPerfDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendPerfDataResponse
#define soap_POST_send_ns1__sendPerfDataResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendPerfDataResponse(soap, data), 0) || soap_put_ns1__sendPerfDataResponse(soap, data, "ns1:sendPerfDataResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendPerfDataResponse * SOAP_FMAC4 soap_get_ns1__sendPerfDataResponse(struct soap*, struct ns1__sendPerfDataResponse *, const char*, const char*);

#ifndef soap_read_ns1__sendPerfDataResponse
#define soap_read_ns1__sendPerfDataResponse(soap, data) ( ((data) ? (soap_default_ns1__sendPerfDataResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendPerfDataResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendPerfDataResponse
#define soap_GET_ns1__sendPerfDataResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendPerfDataResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendPerfDataResponse
#define soap_POST_recv_ns1__sendPerfDataResponse(soap, data) ( soap_read_ns1__sendPerfDataResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__reserveSendPerfData_DEFINED
#define SOAP_TYPE_ns1__reserveSendPerfData_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__reserveSendPerfData(struct soap*, struct ns1__reserveSendPerfData *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__reserveSendPerfData(struct soap*, const struct ns1__reserveSendPerfData *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reserveSendPerfData(struct soap*, const char*, int, const struct ns1__reserveSendPerfData *, const char*);
SOAP_FMAC3 struct ns1__reserveSendPerfData * SOAP_FMAC4 soap_in_ns1__reserveSendPerfData(struct soap*, const char*, struct ns1__reserveSendPerfData *, const char*);

SOAP_FMAC3 struct ns1__reserveSendPerfData * SOAP_FMAC4 soap_new_ns1__reserveSendPerfData(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__reserveSendPerfData(struct soap*, const struct ns1__reserveSendPerfData *, const char*, const char*);

#ifndef soap_write_ns1__reserveSendPerfData
#define soap_write_ns1__reserveSendPerfData(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__reserveSendPerfData(soap, data), 0) || soap_put_ns1__reserveSendPerfData(soap, data, "ns1:reserveSendPerfData", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__reserveSendPerfData
#define soap_PUT_ns1__reserveSendPerfData(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSendPerfData(soap, data), 0) || soap_put_ns1__reserveSendPerfData(soap, data, "ns1:reserveSendPerfData", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__reserveSendPerfData
#define soap_POST_send_ns1__reserveSendPerfData(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSendPerfData(soap, data), 0) || soap_put_ns1__reserveSendPerfData(soap, data, "ns1:reserveSendPerfData", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__reserveSendPerfData * SOAP_FMAC4 soap_get_ns1__reserveSendPerfData(struct soap*, struct ns1__reserveSendPerfData *, const char*, const char*);

#ifndef soap_read_ns1__reserveSendPerfData
#define soap_read_ns1__reserveSendPerfData(soap, data) ( ((data) ? (soap_default_ns1__reserveSendPerfData(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__reserveSendPerfData(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__reserveSendPerfData
#define soap_GET_ns1__reserveSendPerfData(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__reserveSendPerfData(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__reserveSendPerfData
#define soap_POST_recv_ns1__reserveSendPerfData(soap, data) ( soap_read_ns1__reserveSendPerfData(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__reserveSendPerfDataResponse_DEFINED
#define SOAP_TYPE_ns1__reserveSendPerfDataResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__reserveSendPerfDataResponse(struct soap*, struct ns1__reserveSendPerfDataResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__reserveSendPerfDataResponse(struct soap*, const struct ns1__reserveSendPerfDataResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__reserveSendPerfDataResponse(struct soap*, const char*, int, const struct ns1__reserveSendPerfDataResponse *, const char*);
SOAP_FMAC3 struct ns1__reserveSendPerfDataResponse * SOAP_FMAC4 soap_in_ns1__reserveSendPerfDataResponse(struct soap*, const char*, struct ns1__reserveSendPerfDataResponse *, const char*);

SOAP_FMAC3 struct ns1__reserveSendPerfDataResponse * SOAP_FMAC4 soap_new_ns1__reserveSendPerfDataResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__reserveSendPerfDataResponse(struct soap*, const struct ns1__reserveSendPerfDataResponse *, const char*, const char*);

#ifndef soap_write_ns1__reserveSendPerfDataResponse
#define soap_write_ns1__reserveSendPerfDataResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__reserveSendPerfDataResponse(soap, data), 0) || soap_put_ns1__reserveSendPerfDataResponse(soap, data, "ns1:reserveSendPerfDataResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__reserveSendPerfDataResponse
#define soap_PUT_ns1__reserveSendPerfDataResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSendPerfDataResponse(soap, data), 0) || soap_put_ns1__reserveSendPerfDataResponse(soap, data, "ns1:reserveSendPerfDataResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__reserveSendPerfDataResponse
#define soap_POST_send_ns1__reserveSendPerfDataResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__reserveSendPerfDataResponse(soap, data), 0) || soap_put_ns1__reserveSendPerfDataResponse(soap, data, "ns1:reserveSendPerfDataResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__reserveSendPerfDataResponse * SOAP_FMAC4 soap_get_ns1__reserveSendPerfDataResponse(struct soap*, struct ns1__reserveSendPerfDataResponse *, const char*, const char*);

#ifndef soap_read_ns1__reserveSendPerfDataResponse
#define soap_read_ns1__reserveSendPerfDataResponse(soap, data) ( ((data) ? (soap_default_ns1__reserveSendPerfDataResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__reserveSendPerfDataResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__reserveSendPerfDataResponse
#define soap_GET_ns1__reserveSendPerfDataResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__reserveSendPerfDataResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__reserveSendPerfDataResponse
#define soap_POST_recv_ns1__reserveSendPerfDataResponse(soap, data) ( soap_read_ns1__reserveSendPerfDataResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getPerfConfigFile_DEFINED
#define SOAP_TYPE_ns1__getPerfConfigFile_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPerfConfigFile(struct soap*, struct ns1__getPerfConfigFile *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPerfConfigFile(struct soap*, const struct ns1__getPerfConfigFile *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPerfConfigFile(struct soap*, const char*, int, const struct ns1__getPerfConfigFile *, const char*);
SOAP_FMAC3 struct ns1__getPerfConfigFile * SOAP_FMAC4 soap_in_ns1__getPerfConfigFile(struct soap*, const char*, struct ns1__getPerfConfigFile *, const char*);

SOAP_FMAC3 struct ns1__getPerfConfigFile * SOAP_FMAC4 soap_new_ns1__getPerfConfigFile(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPerfConfigFile(struct soap*, const struct ns1__getPerfConfigFile *, const char*, const char*);

#ifndef soap_write_ns1__getPerfConfigFile
#define soap_write_ns1__getPerfConfigFile(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getPerfConfigFile(soap, data), 0) || soap_put_ns1__getPerfConfigFile(soap, data, "ns1:getPerfConfigFile", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getPerfConfigFile
#define soap_PUT_ns1__getPerfConfigFile(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPerfConfigFile(soap, data), 0) || soap_put_ns1__getPerfConfigFile(soap, data, "ns1:getPerfConfigFile", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__getPerfConfigFile
#define soap_POST_send_ns1__getPerfConfigFile(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPerfConfigFile(soap, data), 0) || soap_put_ns1__getPerfConfigFile(soap, data, "ns1:getPerfConfigFile", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getPerfConfigFile * SOAP_FMAC4 soap_get_ns1__getPerfConfigFile(struct soap*, struct ns1__getPerfConfigFile *, const char*, const char*);

#ifndef soap_read_ns1__getPerfConfigFile
#define soap_read_ns1__getPerfConfigFile(soap, data) ( ((data) ? (soap_default_ns1__getPerfConfigFile(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getPerfConfigFile(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getPerfConfigFile
#define soap_GET_ns1__getPerfConfigFile(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getPerfConfigFile(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__getPerfConfigFile
#define soap_POST_recv_ns1__getPerfConfigFile(soap, data) ( soap_read_ns1__getPerfConfigFile(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__getPerfConfigFileResponse_DEFINED
#define SOAP_TYPE_ns1__getPerfConfigFileResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__getPerfConfigFileResponse(struct soap*, struct ns1__getPerfConfigFileResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__getPerfConfigFileResponse(struct soap*, const struct ns1__getPerfConfigFileResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__getPerfConfigFileResponse(struct soap*, const char*, int, const struct ns1__getPerfConfigFileResponse *, const char*);
SOAP_FMAC3 struct ns1__getPerfConfigFileResponse * SOAP_FMAC4 soap_in_ns1__getPerfConfigFileResponse(struct soap*, const char*, struct ns1__getPerfConfigFileResponse *, const char*);

SOAP_FMAC3 struct ns1__getPerfConfigFileResponse * SOAP_FMAC4 soap_new_ns1__getPerfConfigFileResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__getPerfConfigFileResponse(struct soap*, const struct ns1__getPerfConfigFileResponse *, const char*, const char*);

#ifndef soap_write_ns1__getPerfConfigFileResponse
#define soap_write_ns1__getPerfConfigFileResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__getPerfConfigFileResponse(soap, data), 0) || soap_put_ns1__getPerfConfigFileResponse(soap, data, "ns1:getPerfConfigFileResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__getPerfConfigFileResponse
#define soap_PUT_ns1__getPerfConfigFileResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPerfConfigFileResponse(soap, data), 0) || soap_put_ns1__getPerfConfigFileResponse(soap, data, "ns1:getPerfConfigFileResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__getPerfConfigFileResponse
#define soap_POST_send_ns1__getPerfConfigFileResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__getPerfConfigFileResponse(soap, data), 0) || soap_put_ns1__getPerfConfigFileResponse(soap, data, "ns1:getPerfConfigFileResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__getPerfConfigFileResponse * SOAP_FMAC4 soap_get_ns1__getPerfConfigFileResponse(struct soap*, struct ns1__getPerfConfigFileResponse *, const char*, const char*);

#ifndef soap_read_ns1__getPerfConfigFileResponse
#define soap_read_ns1__getPerfConfigFileResponse(soap, data) ( ((data) ? (soap_default_ns1__getPerfConfigFileResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__getPerfConfigFileResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__getPerfConfigFileResponse
#define soap_GET_ns1__getPerfConfigFileResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__getPerfConfigFileResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__getPerfConfigFileResponse
#define soap_POST_recv_ns1__getPerfConfigFileResponse(soap, data) ( soap_read_ns1__getPerfConfigFileResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendEventLog_DEFINED
#define SOAP_TYPE_ns1__sendEventLog_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendEventLog(struct soap*, struct ns1__sendEventLog *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendEventLog(struct soap*, const struct ns1__sendEventLog *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendEventLog(struct soap*, const char*, int, const struct ns1__sendEventLog *, const char*);
SOAP_FMAC3 struct ns1__sendEventLog * SOAP_FMAC4 soap_in_ns1__sendEventLog(struct soap*, const char*, struct ns1__sendEventLog *, const char*);

SOAP_FMAC3 struct ns1__sendEventLog * SOAP_FMAC4 soap_new_ns1__sendEventLog(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendEventLog(struct soap*, const struct ns1__sendEventLog *, const char*, const char*);

#ifndef soap_write_ns1__sendEventLog
#define soap_write_ns1__sendEventLog(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendEventLog(soap, data), 0) || soap_put_ns1__sendEventLog(soap, data, "ns1:sendEventLog", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendEventLog
#define soap_PUT_ns1__sendEventLog(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendEventLog(soap, data), 0) || soap_put_ns1__sendEventLog(soap, data, "ns1:sendEventLog", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendEventLog
#define soap_POST_send_ns1__sendEventLog(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendEventLog(soap, data), 0) || soap_put_ns1__sendEventLog(soap, data, "ns1:sendEventLog", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendEventLog * SOAP_FMAC4 soap_get_ns1__sendEventLog(struct soap*, struct ns1__sendEventLog *, const char*, const char*);

#ifndef soap_read_ns1__sendEventLog
#define soap_read_ns1__sendEventLog(soap, data) ( ((data) ? (soap_default_ns1__sendEventLog(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendEventLog(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendEventLog
#define soap_GET_ns1__sendEventLog(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendEventLog(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendEventLog
#define soap_POST_recv_ns1__sendEventLog(soap, data) ( soap_read_ns1__sendEventLog(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE_ns1__sendEventLogResponse_DEFINED
#define SOAP_TYPE_ns1__sendEventLogResponse_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_default_ns1__sendEventLogResponse(struct soap*, struct ns1__sendEventLogResponse *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_ns1__sendEventLogResponse(struct soap*, const struct ns1__sendEventLogResponse *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns1__sendEventLogResponse(struct soap*, const char*, int, const struct ns1__sendEventLogResponse *, const char*);
SOAP_FMAC3 struct ns1__sendEventLogResponse * SOAP_FMAC4 soap_in_ns1__sendEventLogResponse(struct soap*, const char*, struct ns1__sendEventLogResponse *, const char*);

SOAP_FMAC3 struct ns1__sendEventLogResponse * SOAP_FMAC4 soap_new_ns1__sendEventLogResponse(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns1__sendEventLogResponse(struct soap*, const struct ns1__sendEventLogResponse *, const char*, const char*);

#ifndef soap_write_ns1__sendEventLogResponse
#define soap_write_ns1__sendEventLogResponse(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_ns1__sendEventLogResponse(soap, data), 0) || soap_put_ns1__sendEventLogResponse(soap, data, "ns1:sendEventLogResponse", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_ns1__sendEventLogResponse
#define soap_PUT_ns1__sendEventLogResponse(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendEventLogResponse(soap, data), 0) || soap_put_ns1__sendEventLogResponse(soap, data, "ns1:sendEventLogResponse", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_ns1__sendEventLogResponse
#define soap_POST_send_ns1__sendEventLogResponse(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || (soap_serialize_ns1__sendEventLogResponse(soap, data), 0) || soap_put_ns1__sendEventLogResponse(soap, data, "ns1:sendEventLogResponse", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct ns1__sendEventLogResponse * SOAP_FMAC4 soap_get_ns1__sendEventLogResponse(struct soap*, struct ns1__sendEventLogResponse *, const char*, const char*);

#ifndef soap_read_ns1__sendEventLogResponse
#define soap_read_ns1__sendEventLogResponse(soap, data) ( ((data) ? (soap_default_ns1__sendEventLogResponse(soap, (data)), 0) : 0) || soap_begin_recv(soap) || !soap_get_ns1__sendEventLogResponse(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_ns1__sendEventLogResponse
#define soap_GET_ns1__sendEventLogResponse(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_ns1__sendEventLogResponse(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_ns1__sendEventLogResponse
#define soap_POST_recv_ns1__sendEventLogResponse(soap, data) ( soap_read_ns1__sendEventLogResponse(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Reason_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Detail_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
#define SOAP_TYPE_PointerToSOAP_ENV__Code_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);
#endif

#endif

#ifndef SOAP_TYPE_PointerTolong_DEFINED
#define SOAP_TYPE_PointerTolong_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTolong(struct soap*, long *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTolong(struct soap*, const char *, int, long *const*, const char *);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_in_PointerTolong(struct soap*, const char*, long **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTolong(struct soap*, long *const*, const char*, const char*);
SOAP_FMAC3 long ** SOAP_FMAC4 soap_get_PointerTolong(struct soap*, long **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerToint_DEFINED
#define SOAP_TYPE_PointerToint_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap*, int *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap*, const char *, int, int *const*, const char *);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap*, const char*, int **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap*, int *const*, const char*, const char*);
SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap*, int **, const char*, const char*);
#endif

#ifndef SOAP_TYPE_PointerTostring_DEFINED
#define SOAP_TYPE_PointerTostring_DEFINED
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostring(struct soap*, char **const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostring(struct soap*, const char *, int, char **const*, const char *);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_in_PointerTostring(struct soap*, const char*, char ***, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostring(struct soap*, char **const*, const char*, const char*);
SOAP_FMAC3 char *** SOAP_FMAC4 soap_get_PointerTostring(struct soap*, char ***, const char*, const char*);
#endif

#ifndef SOAP_TYPE__QName_DEFINED
#define SOAP_TYPE__QName_DEFINED

#ifdef SOAP_DEFAULT__QName
#define soap_default__QName(soap, a) (*(a) = SOAP_DEFAULT__QName)
#else
#define soap_default__QName(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);

#define soap__QName2s(soap, a) soap_QName2s(soap, (a))
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2_QName(soap, s, a) soap_s2QName((soap), (s), (char**)(a), 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
#define soap_new__QName soap_new_string

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT__QName
#define soap_PUT__QName(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send__QName
#define soap_POST_send__QName(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put__QName(soap, data, "QName", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET__QName
#define soap_GET__QName(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read__QName(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv__QName
#define soap_POST_recv__QName(soap, data) ( soap_read__QName(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifndef SOAP_TYPE__XML_DEFINED
#define SOAP_TYPE__XML_DEFINED
#endif

#ifndef SOAP_TYPE_string_DEFINED
#define SOAP_TYPE_string_DEFINED

#ifdef SOAP_DEFAULT_string
#define soap_default_string(soap, a) (*(a) = SOAP_DEFAULT_string)
#else
#define soap_default_string(soap, a) (*(a) = (char *)0)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);

#define soap_string2s(soap, a) (a)
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);

#define soap_s2string(soap, s, a) soap_s2char((soap), (s), (char**)(a), 1, 0, -1, NULL)
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);

SOAP_FMAC3 char * * SOAP_FMAC4 soap_new_string(struct soap *soap, int n);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif


#ifndef soap_PUT_string
#define soap_PUT_string(soap, URL, data) ( soap_free_temp(soap), soap_PUT(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap) || soap_recv_empty_response(soap), (soap)->error )
#endif


#ifndef soap_POST_send_string
#define soap_POST_send_string(soap, URL, data) ( soap_free_temp(soap), soap_POST(soap, URL, NULL, "text/xml; charset=utf-8") || soap_put_string(soap, data, "string", "") || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, (data), NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef soap_GET_string
#define soap_GET_string(soap, URL, data) ( soap_GET(soap, URL, NULL) || soap_read_string(soap, (data)), (soap)->error )
#endif


#ifndef soap_POST_recv_string
#define soap_POST_recv_string(soap, data) ( soap_read_string(soap, (data)) || soap_closesock(soap), (soap)->error )
#endif

#endif

#ifdef __cplusplus
}
#endif

#endif

/* End of soapH.h */
