// Code generated by gowsdl DO NOT EDIT.

package getperfservice

import (
	"context"
	"encoding/xml"
	"github.com/hooklift/gowsdl/soap"
	"time"
)

// against "unused imports"
var _ time.Time
var _ xml.Name

// type RemoteException struct {
// 	*IOException

// 	Cause interface{} `xml:"cause,omitempty"`

// 	Message string `xml:"message,omitempty"`
// }

type IOException struct {
	*Exception
}

type RemoteException struct {
	XMLName xml.Name `xml:"http://perf.getperf.com RemoteException"`

	RemoteException *RemoteException `xml:"RemoteException,omitempty"`
}

type TestGetAttachedFileResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com testGetAttachedFileResponse"`

	Return_ string `xml:"return,omitempty"`
}

type CheckAgent struct {
	XMLName xml.Name `xml:"http://perf.getperf.com checkAgent"`

	SiteKey string `xml:"siteKey,omitempty"`

	Hostname string `xml:"hostname,omitempty"`

	AccessKey string `xml:"accessKey,omitempty"`
}

type CheckAgentResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com checkAgentResponse"`

	Return_ string `xml:"return,omitempty"`
}

type RegistAgent struct {
	XMLName xml.Name `xml:"http://perf.getperf.com registAgent"`

	SiteKey string `xml:"siteKey,omitempty"`

	Hostname string `xml:"hostname,omitempty"`

	AccessKey string `xml:"accessKey,omitempty"`
}

type RegistAgentResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com registAgentResponse"`

	Return_ string `xml:"return,omitempty"`
}

type GetLatestVersionResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com getLatestVersionResponse"`

	Return_ string `xml:"return,omitempty"`
}

type GetLatestBuild struct {
	XMLName xml.Name `xml:"http://perf.getperf.com getLatestBuild"`

	ModuleTag string `xml:"moduleTag,omitempty"`

	MajorVer int32 `xml:"majorVer,omitempty"`
}

type GetLatestBuildResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com getLatestBuildResponse"`

	Return_ string `xml:"return,omitempty"`
}

type DownloadUpdateModule struct {
	XMLName xml.Name `xml:"http://perf.getperf.com downloadUpdateModule"`

	ModuleTag string `xml:"moduleTag,omitempty"`

	MajorVer int32 `xml:"majorVer,omitempty"`

	Build int32 `xml:"build,omitempty"`
}

type DownloadUpdateModuleResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com downloadUpdateModuleResponse"`

	Return_ string `xml:"return,omitempty"`
}

type DownloadCertificate struct {
	XMLName xml.Name `xml:"http://perf.getperf.com downloadCertificate"`

	SiteKey string `xml:"siteKey,omitempty"`

	Hostname string `xml:"hostname,omitempty"`

	Timestamp int64 `xml:"timestamp,omitempty"`
}

type DownloadCertificateResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com downloadCertificateResponse"`

	Return_ string `xml:"return,omitempty"`
}

type ReserveSender struct {
	XMLName xml.Name `xml:"http://perf.getperf.com reserveSender"`

	SiteKey string `xml:"siteKey,omitempty"`

	Filename string `xml:"filename,omitempty"`

	Size int32 `xml:"size,omitempty"`
}

type ReserveSenderResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com reserveSenderResponse"`

	Return_ string `xml:"return,omitempty"`
}

type SendData struct {
	XMLName xml.Name `xml:"http://perf.getperf.com sendData"`

	SiteKey string `xml:"siteKey,omitempty"`

	Filename string `xml:"filename,omitempty"`
}

type SendDataResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com sendDataResponse"`

	Return_ string `xml:"return,omitempty"`
}

type SendMessage struct {
	XMLName xml.Name `xml:"http://perf.getperf.com sendMessage"`

	SiteKey string `xml:"siteKey,omitempty"`

	Hostname string `xml:"hostname,omitempty"`

	Severity int32 `xml:"severity,omitempty"`

	Message string `xml:"message,omitempty"`
}

type SendMessageResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com sendMessageResponse"`

	Return_ string `xml:"return,omitempty"`
}

type HelloService struct {
	XMLName xml.Name `xml:"http://perf.getperf.com helloService"`

	Msg string `xml:"msg,omitempty"`
}

type HelloServiceResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com helloServiceResponse"`

	Return_ string `xml:"return,omitempty"`
}

type HelloJedis struct {
	XMLName xml.Name `xml:"http://perf.getperf.com helloJedis"`

	Msg string `xml:"msg,omitempty"`
}

type HelloJedisResponse struct {
	XMLName xml.Name `xml:"http://perf.getperf.com helloJedisResponse"`

	Return_ string `xml:"return,omitempty"`
}

type Exception struct {
	Exception interface{} `xml:"Exception,omitempty"`
}

type GetperfServicePortType interface {

	// Error can be either of the following types:
	//
	//   - RemoteException

	GetLatestVersion() (*GetLatestVersionResponse, error)

	GetLatestVersionContext(ctx context.Context) (*GetLatestVersionResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	DownloadCertificate(request *DownloadCertificate) (*DownloadCertificateResponse, error)

	DownloadCertificateContext(ctx context.Context, request *DownloadCertificate) (*DownloadCertificateResponse, error)

	HelloService(request *HelloService) (*HelloServiceResponse, error)

	HelloServiceContext(ctx context.Context, request *HelloService) (*HelloServiceResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	ReserveSender(request *ReserveSender) (*ReserveSenderResponse, error)

	ReserveSenderContext(ctx context.Context, request *ReserveSender) (*ReserveSenderResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	SendMessage(request *SendMessage) (*SendMessageResponse, error)

	SendMessageContext(ctx context.Context, request *SendMessage) (*SendMessageResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	GetLatestBuild(request *GetLatestBuild) (*GetLatestBuildResponse, error)

	GetLatestBuildContext(ctx context.Context, request *GetLatestBuild) (*GetLatestBuildResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	TestGetAttachedFile() (*TestGetAttachedFileResponse, error)

	TestGetAttachedFileContext(ctx context.Context) (*TestGetAttachedFileResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	DownloadUpdateModule(request *DownloadUpdateModule) (*DownloadUpdateModuleResponse, error)

	DownloadUpdateModuleContext(ctx context.Context, request *DownloadUpdateModule) (*DownloadUpdateModuleResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	RegistAgent(request *RegistAgent) (*RegistAgentResponse, error)

	RegistAgentContext(ctx context.Context, request *RegistAgent) (*RegistAgentResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	CheckAgent(request *CheckAgent) (*CheckAgentResponse, error)

	CheckAgentContext(ctx context.Context, request *CheckAgent) (*CheckAgentResponse, error)

	// Error can be either of the following types:
	//
	//   - RemoteException

	SendData(request *SendData) (*SendDataResponse, error)

	SendDataContext(ctx context.Context, request *SendData) (*SendDataResponse, error)

	HelloJedis(request *HelloJedis) (*HelloJedisResponse, error)

	HelloJedisContext(ctx context.Context, request *HelloJedis) (*HelloJedisResponse, error)
}

type getperfServicePortType struct {
	client *soap.Client
}

func NewGetperfServicePortType(client *soap.Client) GetperfServicePortType {
	return &getperfServicePortType{
		client: client,
	}
}

func (service *getperfServicePortType) GetLatestVersionContext(ctx context.Context) (*GetLatestVersionResponse, error) {
	response := new(GetLatestVersionResponse)
	err := service.client.CallContext(ctx, "urn:getLatestVersion", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) GetLatestVersion() (*GetLatestVersionResponse, error) {
	return service.GetLatestVersionContext(
		context.Background(),
	)
}

func (service *getperfServicePortType) DownloadCertificateContext(ctx context.Context, request *DownloadCertificate) (*DownloadCertificateResponse, error) {
	response := new(DownloadCertificateResponse)
	err := service.client.CallContext(ctx, "urn:downloadCertificate", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) DownloadCertificate(request *DownloadCertificate) (*DownloadCertificateResponse, error) {
	return service.DownloadCertificateContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) HelloServiceContext(ctx context.Context, request *HelloService) (*HelloServiceResponse, error) {
	response := new(HelloServiceResponse)
	err := service.client.CallContext(ctx, "urn:helloService", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) HelloService(request *HelloService) (*HelloServiceResponse, error) {
	return service.HelloServiceContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) ReserveSenderContext(ctx context.Context, request *ReserveSender) (*ReserveSenderResponse, error) {
	response := new(ReserveSenderResponse)
	err := service.client.CallContext(ctx, "urn:reserveSender", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) ReserveSender(request *ReserveSender) (*ReserveSenderResponse, error) {
	return service.ReserveSenderContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) SendMessageContext(ctx context.Context, request *SendMessage) (*SendMessageResponse, error) {
	response := new(SendMessageResponse)
	err := service.client.CallContext(ctx, "urn:sendMessage", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) SendMessage(request *SendMessage) (*SendMessageResponse, error) {
	return service.SendMessageContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) GetLatestBuildContext(ctx context.Context, request *GetLatestBuild) (*GetLatestBuildResponse, error) {
	response := new(GetLatestBuildResponse)
	err := service.client.CallContext(ctx, "urn:getLatestBuild", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) GetLatestBuild(request *GetLatestBuild) (*GetLatestBuildResponse, error) {
	return service.GetLatestBuildContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) TestGetAttachedFileContext(ctx context.Context) (*TestGetAttachedFileResponse, error) {
	response := new(TestGetAttachedFileResponse)
	err := service.client.CallContext(ctx, "urn:testGetAttachedFile", nil, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) TestGetAttachedFile() (*TestGetAttachedFileResponse, error) {
	return service.TestGetAttachedFileContext(
		context.Background(),
	)
}

func (service *getperfServicePortType) DownloadUpdateModuleContext(ctx context.Context, request *DownloadUpdateModule) (*DownloadUpdateModuleResponse, error) {
	response := new(DownloadUpdateModuleResponse)
	err := service.client.CallContext(ctx, "urn:downloadUpdateModule", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) DownloadUpdateModule(request *DownloadUpdateModule) (*DownloadUpdateModuleResponse, error) {
	return service.DownloadUpdateModuleContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) RegistAgentContext(ctx context.Context, request *RegistAgent) (*RegistAgentResponse, error) {
	response := new(RegistAgentResponse)
	err := service.client.CallContext(ctx, "urn:registAgent", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) RegistAgent(request *RegistAgent) (*RegistAgentResponse, error) {
	return service.RegistAgentContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) CheckAgentContext(ctx context.Context, request *CheckAgent) (*CheckAgentResponse, error) {
	response := new(CheckAgentResponse)
	err := service.client.CallContext(ctx, "urn:checkAgent", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) CheckAgent(request *CheckAgent) (*CheckAgentResponse, error) {
	return service.CheckAgentContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) SendDataContext(ctx context.Context, request *SendData) (*SendDataResponse, error) {
	response := new(SendDataResponse)
	err := service.client.CallContext(ctx, "urn:sendData", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) SendData(request *SendData) (*SendDataResponse, error) {
	return service.SendDataContext(
		context.Background(),
		request,
	)
}

func (service *getperfServicePortType) HelloJedisContext(ctx context.Context, request *HelloJedis) (*HelloJedisResponse, error) {
	response := new(HelloJedisResponse)
	err := service.client.CallContext(ctx, "urn:helloJedis", request, response)
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (service *getperfServicePortType) HelloJedis(request *HelloJedis) (*HelloJedisResponse, error) {
	return service.HelloJedisContext(
		context.Background(),
		request,
	)
}
