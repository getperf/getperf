Graph definition file creation
======================

Introduction to make the creation of a chart template. Graph templates are generated by ** cacti-cli ** command on the basis of the graph definition file. The location of the graph definition file,
Become a lib / graph / {domain} / {metric} format of .json, check the definition to open the Linux / loadavg.json files that are installed by default to try.

::

    vi lib / graph / Linux / loadavg.json

::

    {
      "Host_template": "Linux",
      "Host_title": "HW - <node>",
      "Priority": 1,
      "Graphs": [
        {
          "Graph_template": "HW - CPU Load Average",
          "Graph_tree": "/ HW / <node_path> / CPU / Load",
          "Graph_items": [ "load1m", "load5m", "load15m"],
          "Graph_title": "HW - <node> - CPU Load Average",
          "Datasource_title": "HW - <node> - CPU Load Average"
        }
      ]
    }

In the graph of the most simple single graph in a graph pattern, configure the graph item of loadavg metric load1m, load5m, the load15m as a legend. The definition of each element noted in the next section.

Macro definition
----------

Chart definition defines a macro with description. This is used to replace the real name when registering a chart template in the graph of entity.

- <Node>

  Node name of the node definition. Replace the name of the entity, such as a server name.

- <Node_path>

  node_path elements of the node information, the case of the description of the hierarchical directory, and replace the directory part.

- <Device>

  And replace the device name.

- <Devn> cols

  Replace the number of devices in the specified metric. It will be used in replacement of the graph template name multiple devices in a multi-device graph summarized in one graph.
  If the number of devices in the target metric is variable, multiple graph template of from 1 to the maximum number of devices is required, each graph templates,
  There is a need to create - "graph template name {device number} cols" Toi name in advance.
  To replace the time of chart registered in the number of devices in the metric, to search for the appropriate device number of graph templates.

Macro definition of node information

Path node / {node} / info under the files under the node directory will be file that records the configuration information of the node. For example, cpu information of Linux will be less.

::

    more node / Linux / $ {node} /info/cpu.json

::

    {
       "Cache": "6144 KB",
       "Cores": "1",
       "Cpu_mhz": "3192.607",
       "Cpus": 2,
       "Model": "Intel (R) Core (TM) i5-4460 CPU @ 3.20GHz"
    }

Elements of the node configuration information can be defined as a macro. If, for example of the above, the description of "<model> <cores> / <cpus>" in the graph definition, and replace the "Intel (R) Core (TM) i5-4460 CPU @ 3.20GHz 1/2" . All of json file under the info will be subject to macro definition.
Node configuration information can be checked for each element in the ** cacti-cli --info {node path} ** command.

::

    cacti-cli --info node / Linux / $ {node} /

Each element of the graph definition
------------------

How to write each element of the graph definition file you noted below

- Host_template

  It will host the template name, usually the same as the domain name.

- Host_title

  It consists of a device name for the definition of Cacti, the name that enclosed a multiple graph consists of nodes, usually - you have "{domain name} {node name}". Hardware resources of metrics for each OS is to unify the domain name has been with "HW".

- Priority

  When registering together multiple metrics, which order in become one of the priority to the graph register, and the graph registered in order from the low.
  For Cacti tree menu is to be placed from above in the order in which they were registered graph, and set the priority in accordance with the arrangement of the tree menu.

- Graphs

  You define multiple graphs in the form of an array. Each definition of the graphs in the section on that later.

graphs section

- Graph_template

  It will be the graph template name.

- Graph_tree

  Separated by the definition of the graph tree '/' to define the menu hierarchy. Graph tree will use the macro.
  If there is a node_path element to the node configuration information, the directory part of node_path element, will be replaced with the file name part.

- Graph_items

  In the legend of the chart is defined in the form of an array. Legend There is a need to be the same name as the data source name definition of rrd file of RRDtool.

- Graph_title

  Become a title name definition of graph entity, and replaced by the title name of the graph of the entity by the macro.
  Graph title should be unique in your site.

- Datasource_title

  Becomes the data of the source entity title, there is a need to be a unique name as well as the graph_title.

- Chart_style

  In the style of graph layout, in the case of a line graph, you specify the line1, line2, line3. Numerical value of the name represents the thickness of the line, it will be the most bold lines line3.
  If the accumulation of the graph, you specify a stack.

Graph definition description method
--------------------

Graph definition lists each element of the above-mentioned in the order, but the description in the graph pattern with the device there is a different place.
Base will be the description of the single graph of lib / graph / Linux / loadavg.json in the previous example, but noted the differences in the graph pattern with a device below.

- The case of a single device graph

  Add the macro to graph_title and datasource_title. This is in order to have a uniqueness in the graph of multiple devices.
  In some cases, add a macro to graph_tree, it is also possible to create a menu for each device.

  Description example lib / graph / Linux / iostat.json

  ::

       {
         "Graph_template": "HW - Disk IO / sec",
         "Graph_items": [ "r_s", "w_s"],
         "Graph_tree": "/ HW / <node_path> / DiskIO / <node> / <device>",
         "Graph_title": "HW - <node> - Disk IO / s - <device>",
         "Datasource_title": "HW - <node> - Disk IO / s - <device>"
       }

- In the case of multi-device graph

   - At the end of the graph_template Add the "cols".
   - Graph_type: Adds a "multi".
   - To register the maximum number of devices to be registered in one graph to legend_max. If you want to register more than a specified number of devices it is registered in the second graph.
   - In the template in the creation command, a few minutes of the graph template specified in the legend_max will be generated. In the following example, "HW - Disk Busy% - 1 cols" ~ "HW - Disk Busy% - 15 cols" 15 pieces of graph templates will be generated.
   - Graph_items is the designation of one item, please do not specify a plurality of items.
   - Datasource_title Please add the macro only. Do not add the macro to graph_titele.

   Description example lib / graph / Linux / iostat.json

   ::

       {
         "Graph_template": "HW - Disk Busy% - <devn> cols",
         "Graph_type": "multi",
         "Legend_max": 15,
         "Graph_items": [ "pct"],
         "Graph_tree": "/ HW / <node_path> / DiskIO /",
         "Graph_title": "HW - <node> - Disk Busy%",
         "Datasource_title": "HW - <node> - Disk Busy% - <device>"
       }
       