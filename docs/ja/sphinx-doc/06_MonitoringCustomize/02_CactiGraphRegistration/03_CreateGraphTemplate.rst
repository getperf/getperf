グラフテンプレート作成
======================

作成したグラフ定義を基に、 **cacti-cli** コマンドに "-g" オプションを付けてグラフテンプレートを作成します。
本コマンドは、 Cacti のリポジトリデータベース(MySQL)にアクセスしてグラフテンプレートの作成を行います。

cacti-cli 使用方法
------------------

グラフテンプレートの作成は、 **cacti-cli -g {グラフ定義ファイル}** コマンドを使用します。
前述の Linux のロードアベレージのテンプレートの作成は以下となります

::

    cacti-cli -g lib/graph/Linux/loadavg.json

- -g {パス}でグラフ定義ファイルを指定します。
- グラフテンプレートが既に登録済みかの確認を行い、デフォルト動作では、テンプレートがある場合は何もせずに処理をスキップします。
- -f オプションを付けることによりスキップせずに強制的にテンプレートを上書き更新します。

各オプションの詳細は **cacti-cli --help** を参照してください。

実行後、'HW - CPU Load Average'というグラフテンプレートが作成され、Cacti の管理画面を開いてテンプレートの確認をします。

1. Cacti のURL にアクセスし、 admin ユーザでログインします。
2. console タブを選択し、管理画面を開きます。
3. Templates メニューから、以下の各メニューを選択します。

   -  Graph Templates メニューを選択して、リストから 'HW - CPU Load Average' が有ることを確認します。
   -  Host Templates メニューを選択して、リストから　'Linux' が有ることを確認します。
   -  Datasource Templates メニューを選択して、リストから'Linux/loadavg' が有ることを確認します。

Graph Templates メニューからグラフテンプレートの編集が可能です。
テンプレートを選択して、グラフ凡例の配色、タイトル、グラフサイズ、オートスケールなど各種プロパティを要件に合わせて変更をします。
本手順については Cacti 開発サイトの `Cactiマニュアル <http://www.cacti.net/downloads/docs/html/>`_ を参照してください。

-f オプションは既にあるテンプレートを強制的に上書き更新するオプションとなりますが、上書きが完全でない場合が有ります。
その場合は、Graph Templates メニューから該当テンプレートを一旦削除してから **cacti-cli** コマンドを実行してください。

.. note::

  **__root__** テンプレートについて

  Graph Templates メニューには、 **__root__**　というグラフテンプレートがあます。
  本テンプレートは基底テンプレートで、本テンプレートをコピーしてテンプレート作成を行います。
  複数のグラフテンプレート作成で、予めテンプレートに共通の設定が有る場合(例えば、Y軸のスケールを調整したいなど)、
  本テンプレートを編集してから、\ **cacti-cli**\ コマンドを実行することで、基底テンプレートの設定が反映されたテンプレートが作成されます。

配色の設定
----------

**cacti-cli** は、lib/graph/color　の下の配色定義ファイルを参照してグラフ凡例の配色を設定します。
配色の定義(カラースキーマ)はdefault と all があり、指定がない場合は、以下の defalutのファイルを参照します。

-  default.json

   -  デフォルトの配色定義ファイル。 **cacti-cli** コマンドはデフォルトで本ファイルを参照します。
   -  配色リストの定義で、本リストからランダムで選択するパターン、1行目から順に選択するパターンの何れかでグラフの凡例の色を設定します。デフォルトはランダムです。

-  default.txt

   -  配色定義のユーザ定義ファイル。
   -  タブ区切りでID、RGB 3バイトの配色のリスト。
   -  IDはCactiリポジトリの配色IDで、{サイトホーム}/html/cacti/cacti.sql で定義されたIDとなります。
   -  ユーザは本ファイルを編集し、次の make_color_list.pl スクリプトを実行して、配色定義ファイルを生成します。

-  make_color_list.pl

   配色定義ファイル作成スクリプトで以下の通り実行することで、配色定義ファイルを生成します。

    ::

        perl make_color_list.pl {配色名}.txt

   実行後、 {配色名}.json と {配色名}.html が生成されます。 {配色名}.html は Web      ブラウザから開くことで実際の配色定義が確認できます。

all.txt は Cacti　リポジトリで定義されている全配色IDのリストで、本ファイルを別名にコピーして新たな配色定義を作成できます。

cacti-cli コマンドの --color-scheme {配色定義ファイルパス} オプションで配色定義を読み込みます。

::

    cacti-cli -f -g lib/graph/Linux/loadavg.json \
    --color-schema　lib/graph/colors/new-color.json --color-style gradiation

- --color-style {配色パターン} オプションで、以下の何れかを指定します(デフォルトは "randmom"です)
   - "gradiation" : 1行目から順に色を選択
   - "random" : ランダムで行の色を選択

.. note::

  グラフ定義ファイル内の各グラフ定義に "color_scheme" を指定することで、グラフ個別の配色定義ファイルを指定できます。
  この場合は、上記実行オプションの設定より "color_scheme" の設定が優先されます。

ノード情報のマクロ定義
----------------------

ノードディレクトリ下のパス node/{node}/info　の下のファイルはノードの構成情報を記録したファイルとなります。例えばLinuxのcpu情報は以下となります。

::

    more node/Linux/${node}/info/cpu.json

::

    {
       "cache" : "6144 KB",
       "cores" : "1",
       "cpu_mhz" : "3192.607",
       "cpus" : 2,
       "model" : "Intel(R) Core(TM) i5-4460  CPU @ 3.20GHz"
    }

ノード構成情報の要素はマクロとして定義できます。例えば上記の場合は、グラフ定義内の　"<model> <cores>/<cpus>"の記述は、"Intel(R) Core(TM) i5-4460  CPU @ 3.20GHz 1/2"に置換します。infoの下の全てのjsonファイルがマクロ定義の対象となります。
ノード構成情報は **cacti-cli --info {ノードパス}**　コマンドで各要素の確認ができます。

::

    cacti-cli --info node/Linux/${node}/
